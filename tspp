#!/data/data/com.termux/files/usr/bin/bash

## https://github.com/adi1090x/termux-style

source ./tspp.config

## Directories
PREFIX='/data/data/com.termux/files/usr'
TERMUX_DIR="$HOME/.termux"
COLORS_DIR="$PREFIX/share/tspp/colors"
FONTS_DIR="$PREFIX/share/tspp/fonts"
PROMPTS_DIR

## Banner
banner () {
    clear
    echo "
    ${BLUE}TERMUX STYLE${RED}++
    ${BLUE}[${RED}*${BLUE}] ${ORANGE}Originally By- Aditya Shakya ${RED}//${ORANGE} adi1090x"
}

## Script Termination
exit_on_signal_SIGINT () {
    { printf "\n\n%s\n" "    ${BLUE}[${RED}*${BLUE}] ${RED}Script interrupted." 2>&1; echo; reset_color; }
    exit 0
}

exit_on_signal_SIGTERM () {
    { printf "\n\n%s\n" "    ${BLUE}[${RED}*${BLUE}] ${RED}Script terminated." 2>&1; echo; reset_color; }
    exit 0
}

trap exit_on_signal_SIGINT SIGINT
trap exit_on_signal_SIGTERM SIGTERM

## Reset terminal colors
reset_color() {
	tput sgr0   # reset attributes
	tput op     # reset color
    return
}

## Available color-schemes & fonts
check_files () {
    if [[ "$1" = colors ]]; then
        colors=($(ls $COLORS_DIR))
        echo ${#colors[@]}
    elif [[ "$1" = fonts ]]; then
        fonts=($(ls $FONTS_DIR))
        echo ${#fonts[@]}
    fi
    return
}

total_colors=$(check_files colors)
total_fonts=$(check_files fonts)

## Reload Settings
reload_settings () {
    echo "    ${BLUE}[${RED}*${BLUE}] ${MAGENTA}Reloading Settings..."
    am broadcast --user 0 -a com.termux.app.reload_style com.termux > /dev/null
    { echo "    ${BLUE}[${RED}*${BLUE}] ${GREEN}Applied Successfully."; echo; }
    return
}

## Apply color-schemes
apply_colors () {
    local count=1

    # List the color-schemes
    color_schemes=($(ls $COLORS_DIR))
    for colors in "${color_schemes[@]}"; do
        colors_name=$(echo $colors)
        echo ${ORANGE}"    [$count] ${colors_name%.*}"
        count=$(($count+1))
    done

    # Read user selection
    { echo; read -p ${BLUE}"    [${RED}Select Color Scheme (1 to $total_colors)${BLUE}]: ${GREEN}" answer; echo; }

    # Apply color-scheme
    if [[ (-n "$answer") && ("$answer" -le $total_colors) ]]; then
        scheme=${color_schemes[(( answer - 1 ))]}
        echo "    ${BLUE}[${RED}*${BLUE}] ${ORANGE}Applying Color Scheme..."
        cp $COLORS_DIR/$scheme $TERMUX_DIR/colors.properties
        if [[ ! -f "$TERMUX_DIR/.current_color" ]]; then
			touch "$TERMUX_DIR/.current_color"
			echo "$scheme" > "$TERMUX_DIR/.current_color"
        else
			echo "$scheme" > "$TERMUX_DIR/.current_color"
        fi
        { reload_settings; reset_color; exit; }
    else
        echo -n "    ${BLUE}[${RED}!${BLUE}] ${RED}Invalid Option, Try Again."
        { sleep 2; banner; echo; apply_colors; }
    fi
    return
}

## Apply fonts
apply_fonts () {
    local count=1

    # List fonts
    fonts_list=($(ls $FONTS_DIR))
    for fonts in "${fonts_list[@]}"; do
        fonts_name=$(echo $fonts)
        echo ${ORANGE}"    [$count] ${fonts_name%.*}"
        count=$(($count+1))
    done

    # Read user selection
    { echo; read -p ${BLUE}"    [${RED}Select font (1 to $total_fonts)${BLUE}]: ${GREEN}" answer; echo; }

    # Apply fonts
    if [[ (-n "$answer") && ("$answer" -le $total_fonts) ]]; then
        font_ttf=${fonts_list[(( answer - 1 ))]}
        echo "    ${BLUE}[${RED}*${BLUE}] ${ORANGE}Applying Fonts..."
        cp $FONTS_DIR/$font_ttf $TERMUX_DIR/font.ttf
        if [[ ! -f "$TERMUX_DIR/.current_font" ]]; then
			touch "$TERMUX_DIR/.current_font"
			echo "$font_ttf" > "$TERMUX_DIR/.current_font"
        else
			echo "$font_ttf" > "$TERMUX_DIR/.current_font"
        fi
        { reload_settings; reset_color; exit; }
    else
        echo -n "    ${BLUE}[${RED}!${BLUE}] ${RED}Invalid Option, Try Again."
        { sleep 2; banner; echo; apply_fonts; }
    fi
    return
}

apply_ps1 () {
    local count=1

    # List prompt styles
    prompts_list=($(ls $PROMPTS_DIR))
    for ps in "${prompts_list[@]}"; do
        ps_name=$(echo $ps)
        echo ${ORANGE}"    [$count] ${ps_name%.*}"
        count=$(($count+1))
    done

    # Read user selection
    { echo; read -p ${BLUE}"    [${RED}Select Prompt (1 to ${#prompts_list[@]})${BLUE}]: ${GREEN}" answer; echo; }

    # Apply PS1
    if [[ (-n "$answer") && ("$answer" -le ${#prompts_list[@]}) ]]; then
        prompt_file=${prompts_list[(( answer - 1 ))]}
        echo "    ${BLUE}[${RED}*${BLUE}] ${ORANGE}Applying Prompt..."
        cp $PROMPTS_DIR/$prompt_file $TERMUX_DIR/.current_ps1

        # Detect active shell
        shell_name=$(basename "$SHELL")

        if [[ "$shell_name" == "bash" ]]; then
            rcfile="$HOME/.bashrc"
        elif [[ "$shell_name" == "zsh" ]]; then
            rcfile="$HOME/.zshrc"
        else
            rcfile="$HOME/.profile"   # fallback
        fi

        # Ensure RC file sources it
        if ! grep -q ".termux/.current_ps1" "$rcfile"; then
            echo "source $TERMUX_DIR/.current_ps1" >> "$rcfile"
        fi

        echo "    ${BLUE}[${RED}*${BLUE}] ${GREEN}Prompt applied for $shell_name."
        echo "    ${BLUE}[${RED}*${BLUE}] ${GREEN}Restart Termux or run 'source $rcfile' to see changes."
        { reset_color; exit; }
    else
        echo -n "    ${BLUE}[${RED}!${BLUE}] ${RED}Invalid Option, Try Again."
        { sleep 2; banner; echo; apply_ps1; }
    fi
    return
}


## Random style
random_style () {
    echo "    ${BLUE}[${RED}*${BLUE}] ${ORANGE}Setting Random Style..."
    random_scheme=$(ls $COLORS_DIR | shuf -n 1)
    { cp $COLORS_DIR/$random_scheme $TERMUX_DIR/colors.properties; }
    if [[ ! -f "$TERMUX_DIR/.current_color" ]]; then
		touch "$TERMUX_DIR/.current_color"
		echo "$random_scheme" > "$TERMUX_DIR/.current_color"
    else
		echo "$random_scheme" > "$TERMUX_DIR/.current_color"
    fi
    { reload_settings; reset_color; exit; }
}

## Import files
import_files () {
    echo "    ${BLUE}[${RED}L${BLUE}] ${ORANGE}Local File (Enter path to file)
    ${BLUE}[${RED}I${BLUE}] ${ORANGE}Internet File (Enter File URL)"
    { echo; read -p ${BLUE}"    [${RED}Select Option${BLUE}]: ${GREEN}" option; echo; }

    temp_file=$(mktemp $PREFIX/tmp/termux_XXXXXXXXXX.properties)

    if [[ "$option" =~ ^[l/L/i/I]$ ]]; then
        if [[ "$option" =~ ^[l/L]$ ]]; then
            { read -p ${BLUE}"    [${RED}Enter/Paste Path To Color-scheme${BLUE}]: ${GREEN}" file_path; echo; }
            cp $file_path $TERMUX_DIR/colors.properties
            { reload_settings; reset_color; exit; }
        elif [[ "$option" =~ ^[i/I]$ ]]; then
            { read -p ${BLUE}"    [${RED}Enter Color-scheme URL${BLUE}]: ${GREEN}" file_link; echo; }
            wget -o $PREFIX/tmp/log -O $temp_file $file_link
            cp $temp_file $TERMUX_DIR/colors.properties
            { reload_settings; reset_color; exit; }
        fi
    else
        echo -n "    ${BLUE}[${RED}!${BLUE}] ${RED}Invalid Option, Try Again."
        { sleep 2; banner; echo; import_files; }
    fi
}

## About program
about_program () {
    echo -n ${BLUE}"    ┌───────────────────────────────────────────────────────────────┐
    │  			     ┏━┓┏┓ ┏━┓╻ ╻╺┳╸			    │
    │  			     ┣━┫┣┻┓┃ ┃┃ ┃ ┃ 			    │
    │  			     ╹ ╹┗━┛┗━┛┗━┛ ╹ 			    │
    │───────────────────────────────────────────────────────────────│
    │                                                               │
    │ >>  'termux-style' is a simple program that provides color    │
    │     schemes and powerline-ready fonts to customize the        │
    │     appearance of the termux terminal emulator.               │
    │                                                               │
    │                                                               │
    │ >>  Author   :  Aditya Shakya                                 │
    │     Twitter  :  https://twitter.com/adi1090x                  │
    │     Github   :  https://github.com/adi1090x                   │
    │     Reddit   :  https://www.reddit.com/user/adi1090x          │
    │                                                               │
    └───────────────────────────────────────────────────────────────┘"
    { echo; read -p "    ${BLUE}[${RED}*${BLUE}] ${GREEN}Press ${GREENBG}${BLACK} Enter ${DEFAULT_BG}${GREEN} To Return To Main Menu."; }
}

## Main menu
until [[ "$REPLY" =~ ^[q/Q]$ ]]; do
	active_color=`cat $TERMUX_DIR/.current_color`
	active_font=`cat $TERMUX_DIR/.current_font`
    banner
    echo "
    ${BLUE}[${RED}C${BLUE}] ${GREEN}Colors ($total_colors) (${CYAN}${active_color%.*}${GREEN})
    ${BLUE}[${RED}F${BLUE}] ${GREEN}Fonts ($total_fonts) (${CYAN}${active_font%.*}${GREEN})
    ${BLUE}[${RED}P${BLUE}] ${GREEN}Prompts
    ${BLUE}[${RED}R${BLUE}] ${GREEN}Random
    ${BLUE}[${RED}I${BLUE}] ${GREEN}Import
    ${BLUE}[${RED}A${BLUE}] ${GREEN}About
    ${BLUE}[${RED}Q${BLUE}] ${GREEN}Quit
    "

    { read -p ${BLUE}"    [${RED}Select Option${BLUE}]: ${GREEN}"; echo; }

    if [[ "$REPLY" =~ ^[c/C/f/F/r/R/i/I/a/A/q/Q]$ ]]; then      #validate input
        if [[ "$REPLY" =~ ^[c/C]$ ]]; then
            apply_colors
        elif [[ "$REPLY" =~ ^[f/F]$ ]]; then
            apply_fonts
        elif [[ "$REPLY" =~ ^[r/R]$ ]]; then
            random_style
        elif [[ "$REPLY" =~ ^[i/I]$ ]]; then
            import_files
        elif [[ "$REPLY" =~ ^[a/A]$ ]]; then
            about_program
        fi
    else
        echo -n "    ${BLUE}[${RED}!${BLUE}] ${RED}Invalid Option, Try Again."
        sleep 2
    fi
done
{ echo "    ${BLUE}[${RED}*${BLUE}] ${RED}Bye Bye, Have A Nice Day!"; echo; reset_color; exit 0; }
